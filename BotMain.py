import telebot
import imaplib
import email
import schedule
import time
import sqlite3
import threading
from email.header import decode_header
from telebot import types
from datetime import datetime

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ Telegram
TOKEN = '6993475668:AAHhVM0-CdcpHWb12eTbKVo4X_7l9AsMlfY'

# Imap_Server
IMAP_SERVER = 'imap.mail.ru'

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è-—Ñ–ª–∞–≥
fl = 0

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
conn = sqlite3.connect('users.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''
   CREATE TABLE IF NOT EXISTS users (
       chat_id INTEGER PRIMARY KEY,
       email TEXT NOT NULL,
       password TEXT NOT NULL
   )
''')
conn.commit()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É Telegram
bot = telebot.TeleBot(TOKEN)

# –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–∏—Å–µ–º
processed_emails = {}


# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ Telegram
@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup()
    butn1 = types.KeyboardButton('–ü–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ—á—Ç—É –∫ –±–æ—Ç—É')
    markup.add(butn1)
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –ø–∏—Å—å–º–∞ —Å –ø–æ—á—Ç—ã.", reply_markup=markup)
    bot.register_next_step_handler(message, next_step)


def next_step(message):
    markup = types.ReplyKeyboardMarkup()
    butn1 = types.KeyboardButton('–ö–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å?')
    butn2 = types.KeyboardButton('–í—Å—ë —Å–¥–µ–ª–∞–ª')
    markup.row(butn1, butn2)
    if message.text == '–ü–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ—á—Ç—É –∫ –±–æ—Ç—É':
        bot.send_message(message.chat.id,
                         '–û—Ç–ª–∏—á–Ω–æ, –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ–±–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –≤–∫–ª—é—á–∏—Ç—å "–î–æ—Å—Ç—É–ø –∫ –ü–æ—á—Ç–µ –ø–æ IMAP", –ø–æ—Å–ª–µ —á–µ–≥–æ –ø–æ–ª—É—á–∏—Ç—å "–ü–∞—Ä–æ–ª—å –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"',
                         reply_markup=markup)
        bot.register_next_step_handler(message, handle_email_password)
    else:
        bot.send_message(message.chat.id, '–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã –≤–∞–º –Ω—É–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ—á—Ç—É –∫ –±–æ—Ç—Éü§∑')
        bot.register_next_step_handler(message, next_step)


def handle_email_password(message):
    global fl
    if message.text == '–ö–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å?':
        bot.send_message(message.chat.id,
                         '–í—Å—ë –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ! –í–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –Ω–∞—à–∏–º <a href="https://teletype.in/@letun/rn8pBWPlXyR">–≥–∞–π–¥–æ–º</a> –∏ —Å–º–æ–∂–µ—à—å —ç—Ç–æ –ª–µ–≥–∫–æ —Å–¥–µ–ª–∞—Ç—å. –ö–∞–∫ –≤—Å—ë —Å–¥–µ–ª–∞–µ—à—å, –æ—Ç–ø—Ä–∞–≤—å –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ø–æ—á—Ç–∞ –ø–∞—Ä–æ–ª—å (–≥–¥–µ –ø–∞—Ä–æ–ª—å —ç—Ç–æ "–ü–∞—Ä–æ–ª—å –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")',
                         parse_mode='html')
        bot.register_next_step_handler(message, handle_email_password)
    elif message.text == "–í—Å—ë —Å–¥–µ–ª–∞–ª":
        bot.send_message(message.chat.id,
                         '–í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –æ—Ç–ø—Ä–∞–≤—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ø–æ—á—Ç–∞ –ø–∞—Ä–æ–ª—å (–≥–¥–µ –ø–∞—Ä–æ–ª—å —ç—Ç–æ "–ü–∞—Ä–æ–ª—å –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")')
        bot.register_next_step_handler(message, handle_email_password)
    elif message.text.count(' ') == 1:
        email_addr, password = message.text.split()
        cursor.execute("REPLACE INTO users (chat_id, email, password) VALUES (?, ?, ?)",
                       (message.chat.id, email_addr, password))
        conn.commit()
        fl = 1
        try:
            mail = connect_to_mail(email_addr, password)
            markup = types.ReplyKeyboardMarkup()
            butn1 = types.KeyboardButton('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö')
            butn2 = types.KeyboardButton('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –≤—Ö–æ–¥—è—â–∏—Ö')
            butn3 = types.KeyboardButton('–û—Ç–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫—É –ø–∏—Å–µ–º')
            markup.row(butn1, butn2)
            markup.add(butn3)
            bot.reply_to(message, '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –≤–∞–º –ø–∏—Å—å–º–∞.', reply_markup=markup)
            bot.register_next_step_handler(message, handle_user_choice)
        except Exception as e:
            bot.reply_to(message, f'–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}')
    else:
        bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        bot.register_next_step_handler(message, handle_email_password)


def handle_user_choice(message):
    if message.text == '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö':
        show_recent_emails(message.chat.id, '&BB4EQgQ,BEAEMAQyBDsENQQ9BD0ESwQ1-')
        bot.register_next_step_handler(message, handle_user_choice)
    elif message.text == '–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –≤—Ö–æ–¥—è—â–∏—Ö':
        show_recent_emails(message.chat.id, 'INBOX')
        bot.register_next_step_handler(message, handle_user_choice)
    elif message.text == '–û—Ç–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ—Å—ã–ª–∫—É –ø–∏—Å–µ–º':
        disable_email_forwarding(message)
    else:
        bot.send_message(message.chat.id, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        bot.register_next_step_handler(message, handle_user_choice)


def show_recent_emails(chat_id, folder):
    cursor.execute("SELECT email, password FROM users WHERE chat_id = ?", (chat_id,))
    user = cursor.fetchone()
    if not user:
        bot.send_message(chat_id, '–ü–æ—á—Ç–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞.')
        return

    email_addr, password = user
    try:
        mail = connect_to_mail(email_addr, password)
        mail.select(folder)
        result, data = mail.search(None, "ALL")
        id_list = data[0].split()[-5:]  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–∏—Å–µ–º
        messages = []
        for email_id in reversed(id_list):
            result, msg_data = mail.fetch(email_id, "(RFC822)")
            raw_email = msg_data[0][1]
            msg = email.message_from_bytes(raw_email)
            subject = msg.get("Subject")
            if subject:
                subject = decode_header(subject)[0][0]
                if isinstance(subject, bytes):
                    subject = subject.decode()
            else:
                subject = "No Subject"

            sender_name, sender_email = email.utils.parseaddr(msg.get("From"))
            decoded_sender_name = decode_header(sender_name)[0][0]
            if isinstance(decoded_sender_name, bytes):
                decoded_sender_name = decoded_sender_name.decode()

            date_tuple = email.utils.parsedate_tz(msg['Date'])
            if date_tuple:
                local_date = datetime.fromtimestamp(email.utils.mktime_tz(date_tuple))
                email_date = local_date.strftime("%Y-%m-%d %H:%M:%S")
            else:
                email_date = "Unknown Date"

            email_body = ""
            if msg.is_multipart():
                for part in msg.walk():
                    if part.get_content_type() == "text/plain" and not part.get("Content-Disposition"):
                        email_body += part.get_payload(decode=True).decode()
            else:
                if msg.get_content_type() == "text/plain":
                    email_body = msg.get_payload(decode=True).decode()

            message = f"–û—Ç: {decoded_sender_name} <{sender_email}>\n–¢–µ–º–∞: {subject}\n–î–∞—Ç–∞: {email_date}\n\n{email_body}"
            messages.append(message)

        for msg in messages:
            bot.send_message(chat_id, msg)
    except Exception as e:
        bot.send_message(chat_id, f'–û—à–∏–±–∫–∞: {e}')


def disable_email_forwarding(message):
    chat_id = message.chat.id
    cursor.execute("DELETE FROM users WHERE chat_id = ?", (chat_id,))
    conn.commit()
    markup = types.ReplyKeyboardMarkup()
    butn1 = types.KeyboardButton('–ü–æ–¥–∫–ª—é—á–∏—Ç—å –ø–æ—á—Ç—É –∫ –±–æ—Ç—É')
    markup.add(butn1)
    bot.send_message(chat_id, '–ü–µ—Ä–µ—Å—ã–ª–∫–∞ –ø–∏—Å–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∞.', reply_markup=markup)
    bot.register_next_step_handler(message, next_step)


@bot.message_handler()
def send_error(message):
    bot.send_message(message.chat.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ—á—Ç—ã –∏ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ—á—Ç–æ–≤–æ–º—É —è—â–∏–∫—É –∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def connect_to_mail(email, password):
    mail = imaplib.IMAP4_SSL(IMAP_SERVER)
    mail.login(email, password)
    return mail


# –û—Å–Ω–æ–≤–Ω–æ–µ —Ç–µ–ª–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å–µ–º
def fetch_emails(mail, chat_id):
    try:
        mail.select("inbox")
        result, data = mail.search(None, "UNSEEN")  # –ò—â–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞
        ids = data[0]
        id_list = ids.split()
        messages = []
        if id_list:
            for email_id in id_list:
                if email_id not in processed_emails.get(chat_id, set()):
                    result, msg_data = mail.fetch(email_id, "(RFC822)")
                    raw_email = msg_data[0][1]
                    msg = email.message_from_bytes(raw_email)
                    subject = msg.get("Subject")
                    if subject:
                        subject = decode_header(subject)[0][0]
                        if isinstance(subject, bytes):
                            subject = subject.decode()
                    else:
                        subject = "No Subject"

                    sender_name, sender_email = email.utils.parseaddr(msg.get("From"))
                    decoded_sender_name = decode_header(sender_name)[0][0]
                    if isinstance(decoded_sender_name, bytes):
                        decoded_sender_name = decoded_sender_name.decode()

                    date_tuple = email.utils.parsedate_tz(msg['Date'])
                    if date_tuple:
                        local_date = datetime.fromtimestamp(email.utils.mktime_tz(date_tuple))
                        email_date = local_date.strftime("%Y-%m-%d %H:%M:%S")
                    else:
                        email_date = "Unknown Date"

                    email_body = ""
                    attachments = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–ª–æ–∂–µ–Ω–∏–π

                    # –ü–æ–ª—É—á–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏—è
                    for part in msg.walk():
                        if part.get_content_maintype() == "multipart":
                            continue
                        filename = part.get_filename()
                        if filename:
                            attachment = part.get_payload(decode=True)
                            attachments.append((filename, attachment))

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–ª–æ–∂–µ–Ω–∏—è –≤ Telegram
                    for filename, attachment in attachments:
                        bot.send_document(chat_id, attachment)

                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∏—Å—å–º–µ (–±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π)
                    email_body = ""
                    if msg.is_multipart():
                        for part in msg.walk():
                            if part.get_content_type() == "text/plain" and not part.get("Content-Disposition"):
                                email_body += part.get_payload(decode=True).decode()
                    else:
                        if msg.get_content_type() == "text/plain":
                            email_body = msg.get_payload(decode=True).decode()

                    message = f"–û—Ç: {decoded_sender_name} <{sender_email}>\n–¢–µ–º–∞: {subject}\n–î–∞—Ç–∞: {email_date}\n\n{email_body}"
                    messages.append(message)

                    # –ü–æ–º–µ—á–∞–µ–º –ø–∏—Å—å–º–æ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
                    if chat_id not in processed_emails:
                        processed_emails[chat_id] = set()
                    processed_emails[chat_id].add(email_id)

        return messages

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–∏—Å–µ–º –¥–ª—è {chat_id}: {e}")
        return []


def send_email_updates():
    if fl == 1:
        cursor.execute("SELECT chat_id, email, password FROM users")
        users = cursor.fetchall()
        for chat_id, email, password in users:
            try:
                mail = connect_to_mail(email, password)
                email_messages = fetch_emails(mail, chat_id)
                if email_messages:
                    for email_message in email_messages:
                        bot.send_message(chat_id, email_message)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å–µ–º –¥–ª—è {chat_id}: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ NOOP –∫–æ–º–∞–Ω–¥—ã
def keep_mail_connection_alive():
    if fl == 1:
        while True:
            cursor.execute("SELECT email, password FROM users")
            users = cursor.fetchall()
            for email, password in users:
                try:
                    mail = connect_to_mail(email, password)
                    mail.noop()
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è {email}: {e}")
            time.sleep(300)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É NOOP –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç


# –ó–∞–ø—É—Å–∫ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def telegram_bot_polling():
    bot.infinity_polling()


# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def start_scheduler():
    schedule.every(5).seconds.do(send_email_updates)
    while True:
        schedule.run_pending()
        time.sleep(1)


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞
    threading.Thread(target=telegram_bot_polling).start()
    # –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ø–æ—á—Ç–æ–π
    threading.Thread(target=keep_mail_connection_alive).start()
    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    start_scheduler()
